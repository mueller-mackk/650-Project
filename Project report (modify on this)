####################################Step 1:Encoding and full model################################
#####goal: to check if we have multicolinearity issues
#install.packages("NHANES")
library("NHANES")
# install.packages("car")

library(car)
nrow(NHANES)
str(NHANES)
colSums(is.na(NHANES))
help(NHANES)
# Make SleepHrsNight categorical with 3 levels
NHANES$SleepHrsNight_cat <- cut(
  NHANES$SleepHrsNight,
  breaks = c(-Inf, 6, 8, Inf),
  labels = c("<6 hours", "6-8 hours", "8+ hours"),
  right = FALSE
)
# Make Depressed categorical with 4 levels
NHANES$Depressed_cat <- factor(
  NHANES$Depressed,
  levels = c("None", "Several", "Majority", "AlmostAll"),
  labels = c("1", "2", "3", "4")  # Ensure levels correspond to numeric representation
)
# Set the reference group for Depressed as "None"
NHANES$Depressed_cat <- relevel(NHANES$Depressed, ref = "None")
# All covariates 
###Age range
### "TotChol" aged 6 years or older. BMI aged 2 years or older.SleepTrouble aged 16 years and older.
### depression  aged 18 years or older. smoke100 aged 20 years or older. Physactivedays aged12 years or older.
###Diabetes aged 1 year or older.   "AlcoholYear" aged 18 years or older. Regular marij aged 18 to 59 years.
###HardDrugs aged 18 to 69 years. 
vars <- c("TotChol", "Age", "Gender", "Race1", "BMI", "SleepTrouble", 
          "Depressed_cat", "Smoke100", "PhysActive", "Diabetes", "Alcohol12PlusYr",
          "RegularMarij", "HardDrugs", "Poverty")  # Include Poverty_ratio
# Remove missing values
NHANES_clean <- NHANES[complete.cases(NHANES[vars]), ]
nrow(NHANES_clean)

# range for age
age_range <- range(NHANES_clean$Age, na.rm = TRUE)
age_range
#  range for AlcoholYear
alcohol_year_range <- range(NHANES_clean_subset$AlcoholYear, na.rm = TRUE)
print(alcohol_year_range)

# Subset the data to include only participants aged 20 to 59
NHANES_clean_subset <- NHANES_clean[NHANES_clean$Age >= 20 & NHANES_clean$Age <= 59, ]
nrow(NHANES_clean_subset)

# Creating Reference Groups
NHANES_clean_subset$Race1 <- relevel(NHANES_clean$Race1, ref = "White")
NHANES_clean_subset$Gender <- relevel(NHANES_clean$Gender, ref = "male")
NHANES_clean_subset$Smoke100 <- relevel(NHANES_clean$Smoke100, ref = "No")
NHANES_clean_subset$PhysActive <- relevel(NHANES_clean$PhysActive, ref = "No")
NHANES_clean_subset$Diabetes <- relevel(NHANES_clean$Diabetes, ref = "No")
NHANES_clean_subset$SleepTrouble <- relevel(NHANES_clean$SleepTrouble, ref = "No")
NHANES_clean_subset$RegularMarij <- relevel(NHANES_clean$RegularMarij, ref = "No")
NHANES_clean_subset$HardDrugs <- relevel(NHANES_clean$HardDrugs, ref = "No")
NHANES_clean_subset$Alcohol12PlusYr <- relevel(NHANES_clean_subset$Alcohol12PlusYr, ref = "No")
# Center Age, BMI , and Poverty
NHANES_clean_subset$Age_centered <- scale(NHANES_clean$Age, center = TRUE, scale = FALSE)
NHANES_clean_subset$BMI_centered <- scale(NHANES_clean$BMI, center = TRUE, scale = FALSE)
NHANES_clean_subset$Poverty_centered <- scale(NHANES_clean$Poverty, center = TRUE, scale = FALSE)
# Fit MLR model:
predicted_chol <- lm(
  TotChol ~ Age_centered + BMI_centered + Gender + Race1 + 
    Depressed_cat + Smoke100 + SleepTrouble + PhysActive + 
    Diabetes + Alcohol12PlusYr + RegularMarij + HardDrugs + Poverty_centered,  # Add Poverty_ratio
  data = NHANES_clean_subset
)
summary(predicted_chol)
# Checking VIF
vif_values <- vif(predicted_chol)
print(vif_values)
####################################Step 1:Encoding and full model################################




# Correlation Matrix for All Variables Including TotChol Using corrplot
# Load necessary libraries
library(dplyr)
library(corrplot)

# Variables to include in the correlation matrix
vars <- c("TotChol", "Age_centered", "BMI_centered", "Gender", "Race1", 
          "Depressed_cat", "Smoke100", "SleepTrouble", "PhysActive", 
          "Diabetes", "Alcohol12PlusYr", "RegularMarij", "HardDrugs", "Poverty")

# Select relevant variables and convert categorical to numeric
selected_data <- NHANES_clean_subset %>%
  select(all_of(vars)) %>%
  mutate(across(where(is.factor), ~ as.numeric(as.factor(.))))

# Compute the correlation matrix for all selected variables
correlation_matrix <- cor(selected_data, use = "pairwise.complete.obs")

# Generate a correlation plot
corrplot(correlation_matrix, method = "color", type = "upper", 
         tl.col = "black", tl.srt = 45, addCoef.col = "black",
         title = "Correlation Matrix Including TotChol", mar = c(0, 0, 2, 0))



####################################Step 2:model selection################################
#####goal: to select the main effect from potnetial predictors

### forward selection
olsrr::ols_step_forward_p(lm(TotChol~Age_centered + BMI_centered + Gender + Race1 + 
                               Depressed_cat + Smoke100 + SleepTrouble + PhysActive + 
                               Diabetes + Alcohol12PlusYr + RegularMarij + HardDrugs + Poverty_centered,data=NHANES_clean_subset),penter=0.1,details=F)




####################################Step 2:model selection################################





####################################Step 3:model assumptions for the final model################################
# Fit the linear regression model using the selected variables from backward selection (BIC)
#####goal: to check model assumptions for our final linear model
# Final main effect model
Main_effect_model <- lm(TotChol~Age_centered + BMI_centered + Gender + Race1 + 
                          Depressed_cat + Smoke100 + SleepTrouble + PhysActive + 
                          Diabetes + Alcohol12PlusYr + RegularMarij + HardDrugs + Poverty_centered,data=NHANES_clean_subset
)
# Summary of the model to get the coefficients, significance, etc.
summary(Main_effect_model)
# check if we have multicolinearity
vif(Main_effect_model)
### partial regression plot for linearity
# Create partial regression plots for continuous variables (Age_centered, BMI_centered, AlcoholYear, Poverty)
# linearity is valid
library(car)
avPlots(Main_effect_model, terms = ~ Age_centered + BMI_centered + Poverty_centered )
# linearity is valid base on plot
###  residuals vs. fitted values plot for constant variance
plot(Main_effect_model, which = 1, main = "Residuals vs Fitted Values")
# constant variance assumption holds
###  note this is cross_sectional study, so we can assume indepence holds for this
### Dubrin-watson test for independence
#install.packages("lmtest")
library(lmtest)
# perform dw test 
dw_test_result <- dwtest(Main_effect_model)
print(dw_test_result)
### Q-Q plot for checking normality note: By central limit theorem , the inference is valid regardless of normality
qqnorm(residuals(Main_effect_model))
qqline(residuals(Main_effect_model))
# Shapiro-Wilk test for normality
shapiro_test_result <- shapiro.test(residuals(Main_effect_model))
print(shapiro_test_result)
### we have few outliers , and tails looks suspecious
####################################Step 3:model assumptions for the final model################################


####################################Step 4:effect modification################################

# Fit interaction model with all main effects and specified interactions with SleepTrouble
interaction_model <- lm(
  TotChol ~ Age_centered + BMI_centered + Gender + Race1 + 
    Depressed_cat + Smoke100 + SleepTrouble + PhysActive + Diabetes + 
    Alcohol12PlusYr + RegularMarij + HardDrugs + Poverty_centered +
    Smoke100:SleepTrouble + PhysActive:SleepTrouble + Alcohol12PlusYr:SleepTrouble + RegularMarij:SleepTrouble,
  data = NHANES_clean_subset
)


# Summary of the interaction model
summary(interaction_model)


# Fit the reduced model without interaction terms
reduced_model <- lm(
  TotChol ~ Age_centered + BMI_centered + Gender + Race1 + 
    Depressed_cat + Smoke100 + SleepTrouble + PhysActive + Diabetes + 
    Alcohol12PlusYr + RegularMarij + HardDrugs + Poverty_centered,
  data = NHANES_clean_subset
)

# Fit the full model with interaction terms
full_model <- lm(
  TotChol ~ Age_centered + BMI_centered + Gender + Race1 + 
    Depressed_cat + Smoke100 + SleepTrouble + PhysActive + Diabetes + 
    Alcohol12PlusYr + RegularMarij + HardDrugs + Poverty_centered +
    Smoke100:SleepTrouble + PhysActive:SleepTrouble + Alcohol12PlusYr:SleepTrouble + RegularMarij:SleepTrouble,
  data = NHANES_clean_subset
)

# Compare the reduced and full models using an ANOVA test
anova_result <- anova(reduced_model, full_model)

# Print the ANOVA result
print(anova_result)
####################################Step 4:effect modification################################




####################################Step 5:Outliers/Influence Diagnostics################################
#a.Calculate standardized residuals(Data points above ±3, these are usually considered outliers)
standardized_residuals <- rstandard(Main_effect_model)
# Identify residuals exceeding ±3
outliers <- which(abs(standardized_residuals) > 3)
print("Potential Outliers:")
print(outliers)
# Plot standardized residuals
plot(standardized_residuals, main = "Standardized Residuals", 
     xlab = "Observation Index", ylab = "Standardized Residuals")
abline(h = c(-3, 3), col = "red", lty = 2)
#---------------------------------------------------------------------------------------
#b.# Calculate Cook's Distance(Used to detect the effect of data points on the overall model fit.)
cooks_distances <- cooks.distance(Main_effect_model)
# Determine threshold
threshold <- 4 / nrow(NHANES_clean_subset)
# Identify influential points
influential_points <- which(cooks_distances > threshold)
print("Influential Points (Cook's Distance):")
print(influential_points)
# Plot Cook's Distance
plot(cooks_distances, main = "Cook's Distance", 
     xlab = "Observation Index", ylab = "Cook's Distance")
abline(h = threshold, col = "red", lty = 2)
#---------------------------------------------------------------------------------------
#c.# Calculate leverage values(The effect of each data point on the predicted value)
leverage_values <- hatvalues(Main_effect_model)
# Determine threshold
p <- length(coef(Main_effect_model)) - 1  # Number of predictors
n <- nrow(NHANES_clean_subset)  # Sample size
leverage_threshold <- 2 * (p + 1) / n
# Identify high-leverage points
high_leverage_points <- which(leverage_values > leverage_threshold)
print("High Leverage Points:")
print(high_leverage_points)
# Plot leverage values
plot(leverage_values, main = "Leverage Values", 
     xlab = "Observation Index", ylab = "Leverage")
abline(h = leverage_threshold, col = "blue", lty = 2)
#---------------------------------------------------------------------------------------
#d.# Generate an influence plot(Visualization of outliers and high leverage points)
library(car)
influencePlot(Main_effect_model, id.method = "identify",
              main = "Influence Plot", sub = "Circle size is proportional to Cook's Distance")
####################################Step 5:Outliers/Influence Diagnostics################################
